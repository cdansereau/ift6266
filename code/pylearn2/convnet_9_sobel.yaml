# inspired by gyom scipt : https://github.com/gyom/ift6266h15/blob/master/code/scripts/base_conv_06.yaml

!obj:pylearn2.train.Train {
    "dataset": &train !obj:ift6266.code.variable_image_dataset.DogsVsCats {
        transformer: &transformer !obj:ift6266.code.variable_image_dataset.RandomCropSobel {
            scaled_size: 102,
            crop_size: 100,
        },
        start: 0,
        stop: 20000,
    },
    "model": !obj:pylearn2.models.mlp.MLP {
        input_space: !obj:pylearn2.space.Conv2DSpace {
            shape: [100, 100],
            num_channels: 3,
            },
        layers: [!obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h0',
                     output_channels: 32,
                     irange: 0.1,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2]
                 },
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h1',
                     output_channels: 16,
                     irange: 0.1,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2]
                 },
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h2',
                     output_channels: 16,
                     irange: 0.1,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2]
                 },
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h3',
                     output_channels: 16,
                     irange: 0.1,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [2, 2]
                 },
                 !obj:pylearn2.models.mlp.ConvRectifiedLinear {
                     layer_name: 'h4',
                     output_channels: 16,
                     irange: 0.1,
                     kernel_shape: [3, 3],
                     pool_shape: [2, 2],
                     pool_stride: [1, 1]
                 },
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h6',
                     dim: 32,
                     #sparse_init: 10
                     irange: 1.0
                 },
                 !obj:pylearn2.models.mlp.RectifiedLinear {
                     layer_name: 'h7',
                     dim: 64,
                     #sparse_init: 10
                     irange: 1.0
                 },
            !obj:pylearn2.models.mlp.Softmax {
                layer_name: 'y',
                n_classes: 2,
                irange: 1.0,
            },
        ],

    },
    "algorithm": !obj:pylearn2.training_algorithms.sgd.SGD {
        batch_size: &batch_size 64,
        train_iteration_mode: 'batchwise_shuffled_sequential',
        batches_per_iter: 100,
        monitoring_batch_size: *batch_size,
        monitoring_batches: 10,
        monitor_iteration_mode: 'batchwise_shuffled_sequential',
        #learning_rule : !obj:pylearn2.training_algorithms.learning_rule.AdaDelta {
        #},
        learning_rate: 1e-2,
        #learning_rate: 1e-1,
        learning_rule: !obj:pylearn2.training_algorithms.learning_rule.Momentum {
            init_momentum: 0.01
        },
        monitoring_dataset: {
            'train' : *train,
            'valid': !obj:ift6266.code.variable_image_dataset.DogsVsCats {
                transformer: *transformer,
                start: 20000,
                stop: 22500,
            },
            'test': !obj:ift6266.code.variable_image_dataset.DogsVsCats {
                transformer: *transformer,
                start: 22500,
                stop: 25000,
            },
        },
        cost: !obj:pylearn2.costs.cost.SumOfCosts {
            costs: [!obj:pylearn2.costs.cost.MethodCost {
                        method: 'cost_from_X'
                    },
                    !obj:pylearn2.costs.mlp.WeightDecay {
                        coeffs: {h0: .001, h1: .001, h2: .001, h3: .001, h4: .001, h6: .001, h7: .001}
                    }
            ]
        },
        termination_criterion: !obj:pylearn2.termination_criteria.EpochCounter {
            max_epochs: 1000
        },
    },
    "extensions": [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_y_misclass',
             save_path: "/u/langloch/data/base_conv_09_sobel_mlp_best.pkl"
        },
    ],
    save_path: "/u/langloch/data/base_conv_09_sobel_mlp.pkl",
    save_freq: 5

}


